#Name: Antonio Mora & Sugi
#Purpose of code: ALlows a user to input a matrix and roll reduce the matrix with steps and tell the user if the code is lineary independent or dependent
#Future inputs: To tell us about any pivots and a linear combination within the matrix Alongside any free variables. Perhaps show steps on how to determinant. HARD MAYBE: show that a matrix fits in R 
import numpy as np

def get_matrix():
    # Ask user for matrix dimensions
    rows = int(input("Enter the number of rows: "))
    cols = int(input("Enter the number of columns: "))
    
    # Create an empty matrix
    matrix = []
    print("Enter the matrix row by row (space-separated values):")
    for i in range(rows):
        row = list(map(float, input(f"Row {i + 1}: ").split()))
        if len(row) != cols:
            print("Error: The number of values in the row does not match the specified column count.")
            return None
        matrix.append(row)
    
    return np.array(matrix)

def echelon_form(matrix):
    # Get the matrix dimensions
    rows, cols = matrix.shape
    lead = 0
    steps = []  # Keep track of steps for debugging or display

    for r in range(rows):
        if lead >= cols:
            break
        i = r
        while matrix[i][lead] == 0:
            i += 1
            if i == rows:
                i = r
                lead += 1
                if cols == lead:
                    return matrix, steps
        matrix[[r, i]] = matrix[[i, r]]
        steps.append(f"Swap row {r+1} with row {i+1}:\n{matrix}\n")
        
        lv = matrix[r][lead]
        matrix[r] = matrix[r] / lv
        steps.append(f"Divide row {r+1} by {lv}:\n{matrix}\n")
        
        for i in range(rows):
            if i != r:
                lv = matrix[i][lead]
                matrix[i] = matrix[i] - lv * matrix[r]
                steps.append(f"Subtract {lv} * row {r+1} from row {i+1}:\n{matrix}\n")
        lead += 1

    return matrix, steps

def check_independence(echelon_matrix):
    rows, cols = echelon_matrix.shape
    rank = np.sum(~np.all(echelon_matrix == 0, axis=1))  # Count non-zero rows
    
    if rank == min(rows, cols):
        return "The columns of the matrix are linearly independent."
    else:
        return "The columns of the matrix are linearly dependent."

def main():
    matrix = get_matrix()
    if matrix is not None:
        echelon_matrix, steps = echelon_form(matrix)
        
        print("Steps to reduce the matrix to echelon form:")
        for step in steps:
            print(step)
            
        print("Echelon form of the matrix:")
        print(echelon_matrix)
        
        # Check for linear independence
        independence_result = check_independence(echelon_matrix)
        print(independence_result)

main()
